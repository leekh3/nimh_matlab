library('lme4')
library('simr')
library('sjPlot')
library('ggplot2')
theme_set(theme_sjplot2())
library('phia')
library('tidyverse')
library(dplyr)
library(ggplot2)
library(stringr)
Congruent<-""
#setwd(paste0("/Volumes/SDAN-EDB/SDAN1/Data/AttentionRetraining/RN_TAU_DDM/NewDDMmdl_Analysis/Final_seperate_t_v_DDM/Model Fit/TAU_drift/TAU_drift_CON/"))
setwd(paste0("T:/SDAN1/Data/AttentionRetraining/RN_TAU_DDM/Final_New_Analysis_1.1.2021/Model Fit/TAU_ET_CON/"))
group_list <- list.files()
i=1
for (Grp in group_list){
print(Grp)
fName<-paste0(Grp)
Raw<-read.table(file=fName,sep=" ",header=F, stringsAsFactors = F)
db<-Raw[c("V3", "V5")] %>% dplyr::mutate(Subject = Grp)  %>% ungroup
db<-db %>% dplyr::mutate(Condition = "Congruent") %>% dplyr::mutate(Datatype="Simulated") %>% ungroup
db<-db %>% dplyr::rename(Accuracy=V3) %>% dplyr::rename(RT =V5)%>%ungroup
db$Subject = substr(db$Subject,1,nchar(db$Subject)-10)
Congruent<-rbind(Congruent,db)
}
Neutral<-""
#setwd(paste0("/Volumes/SDAN-EDB/SDAN1/Data/AttentionRetraining/RN_TAU_DDM/NewDDMmdl_Analysis/Final_seperate_t_v_DDM/Model Fit/TAU_drift/TAU_drift_NEU/"))
setwd(paste0("T:/SDAN1/Data/AttentionRetraining/RN_TAU_DDM/Final_New_Analysis_1.1.2021/Model Fit/TAU_ET_NEU/"))
group_list <- list.files()
i=1
for (Grp in group_list){
print(Grp)
fName<-paste0(Grp)
Raw<-read.table(file=fName,sep=" ",header=F, stringsAsFactors = F)
db<-Raw[c("V3", "V5")] %>% dplyr::mutate(Subject = Grp)%>%ungroup
db<-db %>% dplyr::mutate(Condition = "Neutral") %>% dplyr::mutate(Datatype="Simulated") %>%ungroup
db<-db %>% dplyr::rename(Accuracy=V3) %>% dplyr::rename(RT =V5)%>%ungroup
db$Subject = substr(db$Subject,1,nchar(db$Subject)-10)
Neutral<-rbind(Neutral,db)
}
Incongruent<-""
#setwd(paste0("/Volumes/SDAN-EDB/SDAN1/Data/AttentionRetraining/RN_TAU_DDM/NewDDMmdl_Analysis/Final_seperate_t_v_DDM/Model Fit/TAU_drift/TAU_drift_INC/"))
setwd(paste0("T:/SDAN1/Data/AttentionRetraining/RN_TAU_DDM/Final_New_Analysis_1.1.2021/Model Fit/TAU_ET_INC/"))
group_list <- list.files()
i=1
for (Grp in group_list){
print(Grp)
fName<-paste0(Grp)
Raw<-read.table(file=fName,sep=" ",header=F, stringsAsFactors = F)
db<-Raw[c("V3", "V5")] %>% dplyr::mutate(Subject = Grp) %>%ungroup
db<-db %>% dplyr::mutate(Condition = "Incongruent") %>% dplyr::mutate(Datatype="Simulated") %>% ungroup
db<-db %>% dplyr::rename(Accuracy=V3) %>% dplyr::rename(RT =V5)%>%ungroup
db$Subject = substr(db$Subject,1,nchar(db$Subject)-10)
Incongruent<-rbind(Incongruent,db)
}
Neutral = Neutral[-1,]
Congruent = Congruent[-1,]
Incongruent= Incongruent[-1,]
Simulation<-rbind(Congruent,Incongruent,Neutral)
rm(db,Raw, Neutral, Incongruent, Congruent)
#setwd("/Volumes/SDAN-EDB/SDAN1/Data/AttentionRetraining/RN_TAU_DDM/NewDDMmdl_Analysis/Final_seperate_t_v_DDM/For QP plots/Drift_txt/")
#loaded data from TAU
setwd(paste0("T:/SDAN1/Data/AttentionRetraining/RN_TAU_DDM/Final_New_Analysis_1.1.2021/Model Fit/Emperical Data/"))
Empirical.data<-""
folder_list <- list.files()
for (folder in folder_list){
print(folder)
fName<-paste0(folder)
Raw<-read.table(file=fName,sep="",header=F)
db<-Raw %>% dplyr::mutate(Subject = folder)%>%ungroup
db$Subject = substr(db$Subject,1,nchar(db$Subject)-4)
Empirical.data<-rbind(Empirical.data,db)
}
Empirical.data<-Empirical.data %>% dplyr::rename(Accuracy=V2) %>% dplyr::rename(RT =V3) %>% dplyr::rename(Condition =V1) %>% ungroup
View(Empirical.data)
Empirical.data = Empirical.data[-1,]
New.Empirical<-Empirical.data[,c(2,3,4,1)]
New.Empirical$Condition<-as.character(New.Empirical$Condition)
New.Empirical$Condition[New.Empirical$Condition=="NEU"]<-"Neutral"
New.Empirical$Condition[New.Empirical$Condition=="CON"]<-"Congruent"
New.Empirical$Condition[New.Empirical$Condition=="INC"]<-"Incongruent"
New.Empirical$Datatype<-"Empirical"
#### TASKS:
#sort by condition
New.Empirical<-New.Empirical[order(New.Empirical$Condition),]
#Checking ids in both datasets
Simulation$Subject<-as.factor(Simulation$Subject)
missing<-unique(New.Empirical[!(New.Empirical$Subject %in% Simulation$Subject),"Subject"])
both<-rbind(Simulation,New.Empirical)
View(both)
require('gridExtra')
library(purrr)
#calculate quantiles per person and by error and acc seperately
p <- c(0.1, 0.3, 0.5, 0.7, 0.9)
p_names <- map_chr(p, ~paste0(.x*100, "%"))
p_funs <- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %>%
set_names(nm = p_names)
p_funs
both.quantiles.acc<-subset(both, both$Accuracy=="1")
both.quantiles.err<-subset(both,both$Accuracy=="0")
require(dplyr)
both.quantiles.acc$RT<-as.numeric(both.quantiles.acc$RT)
quantiles<-both.quantiles.acc %>%
drop_na() %>%
group_by(Condition, Subject) %>%
summarize_at(vars(RT), funs(!!!p_funs))  %>% ungroup
View(quantiles)
quantiles<-both.quantiles.acc %>%
drop_na() %>%
group_by(Condition, Subject) %>%
summarize_at(vars(RT), funs(!!!p_funs))  %>% ungroup
View(quantiles)
both<-rbind(Simulation,New.Empirical)
#Checking ids in both datasets
Simulation$Subject<-as.factor(Simulation$Subject)
missing<-unique(New.Empirical[!(New.Empirical$Subject %in% Simulation$Subject),"Subject"])
both<-rbind(Simulation,New.Empirical)
require('gridExtra')
library(purrr)
#calculate quantiles per person and by error and acc seperately
p <- c(0.1, 0.3, 0.5, 0.7, 0.9)
p_names <- map_chr(p, ~paste0(.x*100, "%"))
p_funs <- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %>%
set_names(nm = p_names)
p_funs
both.quantiles.acc<-subset(both, both$Accuracy=="1")
both.quantiles.err<-subset(both,both$Accuracy=="0")
require(dplyr)
both.quantiles.acc$RT<-as.numeric(both.quantiles.acc$RT)
quantiles<-both.quantiles.acc %>%
drop_na() %>%
group_by(Condition, Subject) %>%
summarize_at(vars(RT), funs(!!!p_funs))  %>% ungroup
View(quantiles)
View(both.quantiles.acc)
detach(package:plyr)
